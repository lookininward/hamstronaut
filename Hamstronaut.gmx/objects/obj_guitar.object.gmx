<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_guitar</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start glower
scr_glow_setup();
tipBox = false;
pending = false;
glow = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup glower
if(glow) {
    scr_glow_step();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// consume excercise

if (tipBox) {
    obj_hamster.hamsterMaxSpeed = obj_hamster.oldHamsterMaxSpeed;
    
    with(tipBox){
        instance_destroy();
    }
    
    tipBox = false;
}

if(pending) {
    obj_hamster.healthBarDistanceLeft = obj_hamster.maxHealthBarDistance;
    pending = false;
    glow = false;
    obj_mental_bar.glow = false;
    
    if(!obj_hamster.welcomed) {
        messages[0] = 'Tapping into that zen moment I see.'
        messages[1] = 'Now you know that keeping your nutritional, physical, and mental health is important to a healthy lifestyle in this environment. Keep an eye on those bars. They will need your attention as you go about your mission aboard the ISS.';
        scr_pop_tip_box_sal(messages, 0);
        obj_hamster.welcomed = true;
    } else {
        followUpMessages[0] = 'Some astronauts take along their own instruments to relax in space. Canadian astronaut Chris Hadfield is known for bringing his acoustic guitar.';
        followUpMessages[1] = 'Many astronauts say that their favourite activity is to gaze out the window and admire Earth. Canadian astronauts Chris Hadfield and Roberta Bondar are known for their photography of Earth from space.';
        followUpMessages[2] = 'Time for relaxation and recreation is essential. To reduce boredom, homesickness and isolation, astronauts are able to receive a weekly video telephone call from home, as well as daily email messages.';
        followUpMessages[3] = 'There is a wide choice of leisure activities, since crew members are allowed to take along their personal choice of entertainment, including : checkers, chess, books, and CDs.';
        followUpMessages[4] = 'Astronauts receive daily news updates keep them in touch with events back on Earth. Communication sessions with schools and amateur radio operators are common.';
        
        messages[0] = followUpMessages[irandom(4)];
        scr_pop_tip_box_sal(messages, 0);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup glower

if(glow) {
    scr_glow_draw(spr_guitar, spr_guitar_glow);
} else {
    sprite_index = spr_guitar;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
