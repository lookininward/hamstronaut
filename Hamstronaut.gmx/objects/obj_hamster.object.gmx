<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hamster</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Variables
hamsterMaxSpeed = 20;
hamsterHeight = sprite_height;
hamsterWidth = sprite_width;
minHealthBarDistance = 1000;
maxHealthBarDistance = 3000;
healthBarDistanceLeft = 2500;
foodBarDistanceLeft = 2500;
muscleBarDistanceLeft = 2500;
distanceTravelled = 0;
firstFoodMessage = true;
healthLevel = (healthBarDistanceLeft / maxHealthBarDistance) * 100;
foodLevel = (foodBarDistanceLeft / maxHealthBarDistance) * 100;
muscleLevel = (muscleBarDistanceLeft / maxHealthBarDistance) * 100;
hamsterSpeed = (
    (foodBarDistanceLeft + muscleBarDistanceLeft + healthBarDistanceLeft) / 
    (maxHealthBarDistance * 3)
) * hamsterMaxSpeed;
hasFood = false;

//timeline_index = tml_guide;
//timeline_position = 0;
//timeline_running = true;
//timeline_loop = false;

x = 578;
y = 520;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Diagonal movements
var up_down_moved = keyboard_check(vk_up) || keyboard_check(vk_down);
var left_right_moved = keyboard_check(vk_left) || keyboard_check(vk_right);

if(up_down_moved || left_right_moved) {
    distanceTravelled += obj_hamster.hamsterSpeed;
    
    if(foodBarDistanceLeft &gt; minHealthBarDistance){
        foodBarDistanceLeft -= obj_hamster.hamsterSpeed;
    } else if(not hasFood) {
        scr_pop_food();
        hasFood = true;
    }
    
    if(healthBarDistanceLeft &gt; minHealthBarDistance){
        healthBarDistanceLeft -= obj_hamster.hamsterSpeed;
    } else if (!obj_guitar.pending) {
        obj_guitar.pending = true;
    }
    
    if(muscleBarDistanceLeft &gt; minHealthBarDistance){
        muscleBarDistanceLeft -= obj_hamster.hamsterSpeed;
    } else if (!obj_wheel.pending) {
        obj_wheel.pending = true;
    }
}

obj_debug_text.debugMode = true;
obj_debug_text.debugText = string(foodBarDistanceLeft) + ', ' + string(healthBarDistanceLeft) + ', ' + string(muscleBarDistanceLeft);

healthLevel = (healthBarDistanceLeft / maxHealthBarDistance) * 100;
foodLevel = (foodBarDistanceLeft / maxHealthBarDistance) * 100;
muscleLevel = (muscleBarDistanceLeft / maxHealthBarDistance) * 100;
hamsterSpeed = (healthBarDistanceLeft / maxHealthBarDistance) * hamsterMaxSpeed;
hamsterSpeed = (
    (foodBarDistanceLeft + muscleBarDistanceLeft + healthBarDistanceLeft) / 
    (maxHealthBarDistance * 3)
) * hamsterMaxSpeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_food">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Show food tip

if(!other.tipBox) {
    messages[0] = 'Yummmyyyy... Press "spacebar" to eat';
    other.tipBox = scr_pop_tip_box_sal(messages, 0);
        

    if(firstFoodMessage) {
        firstFoodMessage = true;
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wheel">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Show wheels tip

messages[0] = 'Press "spacebar" to complete exercise';
other.tipBox = scr_pop_tip_box_sal(messages, 0);
other.pending = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_tomatoes">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Do next tomato task
if(
    obj_hamster.foodBarDistanceLeft &lt; (0.5 * obj_hamster.maxHealthBarDistance) ||
    obj_hamster.healthBarDistanceLeft &lt; (0.5 * obj_hamster.maxHealthBarDistance) ||
    obj_hamster.muscleBarDistanceLeft &lt; (0.2 * obj_hamster.maxHealthBarDistance)
) {
    messages[0] = 'You need minimun 50% of food power, 50% of mental wellness and 20% of excercise level to perform this experiment';
    tipBox = scr_pop_tip_box_sal(messages, 0);
    
    obj_hamster.hamsterMaxSpeed = tipBox.oldHamsterMaxSpeed;
    
} else if(!other.done &amp;&amp; !other.pending) {
    next = other.index + 1;
    if(next &lt; array_length_1d(other.stages)) {
        other.index = next;
        other.pending = true;

        messages[0] = 'Press "spacebar" to perform the experiment';
        other.tipBox = scr_pop_tip_box_sal(messages, 0);


        //other.sprite_index = other.stages[other.index];
    } else {
        other.done = true
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_iss_wall_vertical">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Keep hamster between left and right

if (x &lt; other.leftX) { //right wall
    x = other.leftX - hamsterWidth * 0.5;
} else { //top wall
    x = other.rightX + hamsterWidth * 0.5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_iss_wall_horizontal">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Keep hamster between top and bottom

if (y &lt; other.topY) { //bottom wall
    y = other.topY - hamsterHeight * 0.5;
} else { //top wall
    y = other.bottomY + hamsterHeight * 0.5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>y = y + hamsterSpeed
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = x + hamsterSpeed
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>y = y - hamsterSpeed
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = x - hamsterSpeed
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Print x, y location

obj_debug_text.debugMode = true;
obj_debug_text.debugText = "position: " + string(mouse_x) + ", " + string(mouse_y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
